<TargetEndpoint name="immunisation-history-target">
  <FaultRules>
    <FaultRule name="access_token_expired">
      <Step>
        <Name>ExtractVariables.OAuthErrorFaultString</Name>
      </Step>
      <Step>
        <Name>AssignMessage.OAuthPolicyErrorResponse</Name>
      </Step>
      <Condition>oauthV2.OauthV2.VerifyAccessToken.failed</Condition>
    </FaultRule>
  </FaultRules>
  <PreFlow>
    <Request>
      <Step>
        <Name>OauthV2.VerifyAccessToken</Name>
      </Step>
      <Step>
        <!-- X-Correlation-ID header renamed to NHSD-Correlation-ID -->
        <Name>AssignMessage.400BadRequest</Name>
        <Condition>not(request.header.X-Correlation-ID is null)</Condition>
      </Step>
      <!-- <Step>
        <Name>VerifyApiKey.XApiKey</Name>
        <Condition>(proxy.pathsuffix MatchesPath "/_status") and (request.verb = "GET")</Condition>
      </Step>
      <Step>
        <Name>AssignMessage.RenameQuotaVarsFromVerifyAPIKeyPolicyClientId</Name>
      </Step> -->
      <Step>
        <Name>Quota</Name>
      </Step>
      <Step>
        <Name>SpikeArrest</Name>
      </Step>
      <Step>
        <!--This should always be the last Step - as it is just before the message is sent - so the initial request stays intact for as long as possible.
            The Swapping of the Request Headers converts X-Correlation-ID to NHSD-Correlation-ID before sending to backend. -->
        <Name>AssignMessage.Swap.RequestHeaders</Name>
      </Step>
    </Request>
  </PreFlow>
  <HTTPTargetConnection>
    <SSLInfo>
      <Enabled>true</Enabled>
    </SSLInfo>
    <LoadBalancer>
      <Server name="immunisation-history" />
    </LoadBalancer>
  </HTTPTargetConnection>
</TargetEndpoint>
