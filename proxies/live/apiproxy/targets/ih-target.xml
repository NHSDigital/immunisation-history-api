<TargetEndpoint name="immunisation-history-target">
  <FaultRules>
    <FaultRule name="access_token_expired">
      <Step>
        <Name>ExtractVariables.OAuthErrorFaultString</Name>
      </Step>
      <Step>
        <Name>AssignMessage.OAuthPolicyErrorResponse</Name>
      </Step>
      <Condition>oauthV2.OauthV2.VerifyAccessToken.failed</Condition>
    </FaultRule>
  </FaultRules>
  <PreFlow>
    <Request>
      <Step>
        <Name>OauthV2.VerifyAccessToken</Name>
      </Step>
      <!-- Check JWT Header Exists-->
      <Step>
        <Name>RaiseFault.400BadRequest</Name>
        <Condition>request.header.NHSD-User-Identity = null</Condition>
      </Step>
      <Step>
        <Name>ServiceCallout.GetJWKS</Name>
      </Step>
      <Step>
        <Name>Quota</Name>
      </Step>
      <Step> 
        <Name>SpikeArrest</Name>   
      </Step>
      <!-- Set flow variable 'access-mode' by inspecting the token's scopes.
      First set to least-privilege (application restricted) then look for scopes indicating higher privilege, overwriting as appropriate.
      'scope' is a space-separated string of scopes, determined by the Application's API Product assignments.
      Follow pattern used in AssignMessage.SetAccessModeUserRestricted condition. See Apigee docs for JavaRegex gotchas (uses '.match()' behaviour matching whole string only). -->
      <Step>
        <Name>AssignMessage.SetAccessModeApplicationRestricted</Name>
      </Step>
<!--      <Step>-->
<!--        &lt;!&ndash; This will return 404 because /_status doesn't exist for the backend. Either implement _status for your backend-->
<!--        or use a service-callout to call health-check endpoint &ndash;&gt;-->
<!--        <Name>VerifyApiKey.XApiKey</Name>-->
<!--        <Condition>(proxy.pathsuffix MatchesPath "/_status") and (request.verb = "GET")</Condition>-->
<!--      </Step>-->
<!--      <Step>-->
<!--        <Name>AssignMessage.RenameQuotaVarsFromVerifyAPIKeyPolicyClientId</Name>-->
<!--      </Step>-->
      <Step>
        <Name>Quota</Name>
      </Step>
      <Step>
        <Name>SpikeArrest</Name>
      </Step>
    </Request>
  </PreFlow>
  <HTTPTargetConnection>
    <SSLInfo>
      <Enabled>true</Enabled>
    </SSLInfo>
    <LoadBalancer>
      <Server name="immunisation-history" />
    </LoadBalancer>
    <Path>/immunisation-history</Path>
  </HTTPTargetConnection>
  <DefaultFaultRule>
    <Step>
        <Name>AssignMessage.Errors.CatchAllMessage</Name>
    </Step>
  </DefaultFaultRule>
</TargetEndpoint>
